mini-pascal context-free grammar
by Karol Wesołowski, 12206888
(tested using https://web.stanford.edu/class/archive/cs/cs103/cs103.1156/tools/cfg/)

S -> program_struct

#BASICS
digit -> 0|1|2|3|4|5|6|7|8|9
number -> digit | digit number
addition -> +|-
multi -> *|/|DIV
comp_sign -> <>|<|>|<=|>=|= 
type -> INTEGER|REAL|BOOLEAN

#(As 'variable' can be used any set of characters, that is not a key word. Considering lexical analizer function, to convert all keywords to uppercase, we can assume that all variables [or identifiers to be precise] will be in lowercase. Therefore we can write as follows:)

letter -> a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|_
variable -> letter | letter variable | letter number variable


#VARIABLES
num_var -> number | variable
argument -> num_var | variable[num_var] | func_exec
argument_list -> argument | argument, argument_list
array_def -> ARRAY [argument..argument] OF type
list_of_vars -> variable | variable, list_of_vars
var_type -> list_of_vars: type; | list_of_vars: array_def;
list_of_var_types -> var_type | var_type list_of_var_types
var_def -> VAR list_of_var_types | Ɛ

#MATH
expression -> expression addition term | term
term -> term multi br_num | br_num
br_num -> (expression) | argument

#LOGIC
comparison -> expression comp_sign expression
condition -> comparison | expression
set_of_conditions -> condition  
					| condition AND set_of_conditions
					| condition OR set_of_conditions

#STRUCTURE
program_header -> PROGRAM variable;
block_def -> BEGIN set_of_instr END; | instruction;
set_of_instr -> instruction | instruction; set_of_instr
func_header -> FUNCTION variable (list_of_var_types): type;
proc_header -> PROCEDURE variable (list_of_var_types);
fp_header -> proc_header | func_header
fp_struct -> fp_header var_def block_def
set_of_fps -> Ɛ | fp_struct set_of_fps

program_struct -> program_header var_def set_of_fps BEGIN set_of_instr END.

instruction -> while_def | if_def | assignment | func_exec
#INSTRUCTIONS
while_def -> WHILE set_of_conditions DO block_def
if_def -> IF set_of_conditions THEN block_def else_def
else_def -> ELSE block_def | Ɛ
assignment -> variable := expression
func_exec -> variable(argument_list)
